--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]

-- Notes:
-- I use players['Blue'] because in a few functions you can input
--     'players[Color of Player that clicked button]' to easily get the player variables
-- Indexes start at 1. So the first element in a table is at 'table[1]'
-- You can use '#' to get the length of a table like '#table'
-- Using editNotebookTab() is super janky, check Notebook info in Utility section
--
-- Workshop ID: 2723093390

--assign GUIDs (get GUIDs from game, set here so only have to change GUIDs in one spot)
button_GUID = '9fdc25'
fieldZone_GUID = '7a6e1a'
deckZone_GUID = '7f0e92'
winPile_GUID = {}
winPile_GUID['Blue'] = '4ca699'
winPile_GUID['Orange'] = 'c641a0'
hand_GUID = {}
hand_GUID['Blue'] = 'fd5538'
hand_GUID['Orange'] = '48113c'
discard_GUID = '7f3593'
deckBuilder_GUID = 'b8db70'

players = {}
--Table of Player Blue variables
players['Blue'] = {
  betState=false, --If player betted
  betPos={7,1.15,3.75}, -- For player's bet position
  sumButtonPos={-19,1.15,1.4}, -- Position of sum points button
  --class='',     --player's class
  --drawNum=0,    --amount player will draw by default (for classes?)
  winPile='',    --player's winpile
  wonCards={},    --Table of cards in player's winPile
  points=0,       --player's points
  hand=''        --player's hand
}

--Table of Player 2 variables (Orange)
players['Orange'] = {
  bet_state=false,--If player betted
  betPos={7,1.15,-3.75}, -- For player's bet position
  sumButtonPos={-19,1.15,-1.4}, -- Position of sum points button
  --class='',     --player's class
  --drawNum=0,    --amount player will draw by default (for classes?)
  winPile='',    --player's winpile
  wonCards={},    --Table of cards in player's winPile
  points=0,       --player's points
  hand=''        --player's hand
}

-- For gathering game statistics
record = {}
record['points'] = {} -- Points won each rouund of the game

-- Value of face cards
faceCardValue = 10
-- global table of card stats
stats = {}
stats['Ace'] = {1,1}
stats['2'] = {2,2}
stats['3'] = {20,3}
stats['4'] = {4,4}
stats['5'] = {5,5}
stats['6'] = {6,6}
stats['7'] = {7,7}
stats['8'] = {8,8}
stats['9'] = {9,9}
stats['10'] = {10,10}
stats['Jack'] = {faceCardValue,11}
stats['Queen'] = {faceCardValue,12}
stats['King'] = {faceCardValue,13}
stats['Joker'] = {0,0}

-- Misc
roundsTabIndex = 3 -- Index of Rounds Tab in Notebook
summaryTabIndex = 4 -- Index of Summary Tab in Notebook

-- Global table of zone variables
zone_vars = {
  allow_swapping=false,
  cards_per_deck=1,
  combine_into_decks=false,
  meld_sort_existing=true,
  --direction=0,
  horizontal_group_padding=.1,
  vertical_group_padding=.1,
  horizontal_spread=.4,
  vertical_spread=0,
  max_objects_per_group=4,
  max_objects_per_new_group=4,
  new_object_facing=1,
  split_added_decks=true,
  sticky_cards=false
}

-- Track if players should be allowed to use Draw Card shortcut or not
gameStarted = false

-- Runs once when the game loads
function onLoad()
  log('onLoad!')

  --Get objects from GUIDs (All these variables are global)
  button = getObjectFromGUID(button_GUID)
  button.setPosition({0,0,0})
  button.setRotation({0,0,0})

  fieldZone = getObjectFromGUID(fieldZone_GUID)
  deckZone = getObjectFromGUID(deckZone_GUID)
  players['Blue'].winPile = getObjectFromGUID(winPile_GUID['Blue'])
  players['Orange'].winPile = getObjectFromGUID(winPile_GUID['Orange'])
  players['Blue'].hand = getAllObjects(hand1_GUID)
  players['Orange'].hand = getAllObjects(hand2_GUID)
  discardZone = getObjectFromGUID(discard_GUID)
  deckBuilder = getObjectFromGUID(deckBuilder_GUID)

  --players['Blue'].winPile.addTag("pile")
  --players['Orange'].winPile.addTag("pile")
  --discard.addTag("pile")

  --log('Testing Win Pile: '..players['Blue'].winPile.getGUID())

  --Shuffle deck
  local deck = deckZone.getObjects()
  for _, item in ipairs(deck) do -- Check if there's a deck
      if item.tag == 'Deck' then
          item.shuffle() -- Return deck
      end
  end

  --Make deal button (setup button)
  local bDeal_vars = {
    click_function='dealCards', function_owner=nil, label='Deal',
    position={7,3,0}, rotation={0,90,0}, width=1200, height=800, font_size=300,
    color={1, 1, 1}, font_color={0, 0, 0},
    tooltip="Give players 4 cards"
  }
  button.createButton(bDeal_vars)

  --Make Build Deck button (a button to assign Havoc values to cards)
  local bDeckBuilder_vars = {
    click_function='build', function_owner=deckBuilder, label='Build Deck',
    position={-19,4,-9}, rotation={0,180,0}, width=1500, height=800, font_size=300,
    color={1,1,1}, font_color={0, 0, 0},
    tooltip="Spread cards here then click button to use custom decks"
  }
  button.createButton(bDeckBuilder_vars)



  -- Setup shortcuts
  addHotkey('Draw Card', drawCardShortcut)
  addHotkey('Get Discard Sum', getDiscardSumShortcut)
  addHotkey('Get My Sum', getMySumShortcut)
  addHotkey("Get Opponent's Sum", getOpponentSumShortcut)
end


-- Runs every frame
function onUpdate()

end

-- Runs when an object enters a zone
function onObjectEnterZone(zone, object)
  --log("Object " .. object.guid .. " entered zone " .. zone.guid) -- Degugging
  local color = zone.getVar('owner') -- Color of player who owns zone
  if color != nil then
    --log("player color: "..color)
    if (zone==players[color].winPile) then-- A win or discard pile and card entering
      zone.LayoutZone.layout()--So both cards and decks activate layout
      if object.tag=='Card' then
        --Can optionaly add 'true' as a parameter to log cards
        recordCard(players[color],object.getName()) -- Add card to player's wonCards Table (Player and card name)
      end
    elseif zone==discardZone then
      zone.LayoutZone.layout()
    end
  else
    --log('Zone doesn\'t have an owner')
  end
end

function onObjectLeaveZone(zone, object)
  local color = zone.getVar('owner') -- Color of player who owns zone
  if color != nil then
    --log("player color: "..color)
    if (zone==players[color].winPile and object.tag=='Card') then-- A win or discard pile and card entering
      --Can optionaly add 'true' as a parameter to log cards
      forgetCard(players[color],object.getName()) -- Add card to player's wonCards Table (Player and card name)
    end
  else
    --log('Zone doesn\'t have an owner')
  end
end

--Record card in player's wonCard table, Pass in player and name of card (boolean log if logging)
function recordCard(player,name)
  if player.wonCards[name] == nil then -- If card hasn't been counted yet
    player.wonCards[name] = 1
  else -- If card has been counted
    player.wonCards[name] = player.wonCards[name] + 1
    if player.wonCards[name] > 4 then
      log('Error: Counted more than 4 of '..name..'s')
    end
  end
  log('Count '..player.wonCards[name]..' '..name..'(s) in zone')
end

--Forget card in player's wonCard table, Pass in player and name of card
function forgetCard(player,name)
  player.wonCards[name] = player.wonCards[name] - 1
  if player.wonCards[name] < 0 then
    log('Error: wonCards reads a negative value for '..name)
  end
  log('Count '..player.wonCards[name]..' '..name..'(s) in zone')
end

-- *~~* ~**~ *~~* [[  Utility  ]] *~~* ~**~ *~~* --


-- *~~* ~**~ *~~* [[  Utility  ]] *~~* ~**~ *~~* --


-- *~~* ~**~ *~~* [[  Utility  ]] *~~* ~**~ *~~* --

-- Get a card from either the deck or card in the deck zone (a singe card deck turns into a card)
function getDeck()
    local zoneObjects = deckZone.getObjects()
    for _, item in ipairs(zoneObjects) do -- Check if there's a deck
        if item.tag == 'Deck' then
            return item -- Return deck
        end
    end
    for _, item in ipairs(zoneObjects) do -- Check if there's a card after checking for deck
        if item.tag == 'Card' then
            return item -- Return card
        end
    end
    log('Deck is empty')
    return nil
end

-- deals a card all players or a certain player from the deck Zone (playerColor optional)
function dealDeck(number, playerColor)
  if getDeck() != nil then
    if playerColor == nil then
      getDeck().deal(number)
    else
      getDeck().deal(number, playerColor)
    end
  end
end

-- Removes button with specific position (because removeButton() only works with indexes)
function deleteButtonHere(position)
  for i, b in pairs(button.getButtons()) do
    if button.positionToWorld(b.position) == button.positionToWorld(position) then -- So that both positions will match
      button.removeButton(i-1) -- The corresponding indec (because indexes start at 1)
      break
    end
  end
end

--                     !!! IMPORTANT INFORMATION ABOUT NOTEBOOKS !!!
--                     !!! IMPORTANT INFORMATION ABOUT NOTEBOOKS !!!
-- Can't just make you own Notebooks, make sure you start with the default 12 notebooks (Gr,Wh,Br,R,O,Y,B,B,T,Pu,Pi,Bl)
-- Each default notebook has an id which can't be changed with scripts. Ids are different from index and color
--      Source of discovery (sebaestschjin) https://tabletopsimulator.nolt.io/398
-- If you delete a default notebook, any new or old notebooks with a higher id can't be edited by the editNotebookTab() function
--      My guess is that when finding the notebook to edit, if an id is missing, then it just stops searching for notebooks
-- Another oddity is that you can't change the color with editNotebookTab(), and must do it manually in TableTop
-- You are able to have more than 12 notebooks that are editable, by keeping the 12 default (and editing them to your desire), then adding additional notebooks
--                     !!! IMPORTANT INFORMATION ABOUT NOTEBOOKS !!!
--                     !!! IMPORTANT INFORMATION ABOUT NOTEBOOKS !!!

-- Adds a new line to Rounds Notebook tab
function addRoundNote(note)
  -- Get the Notebook array, Get the Rounds Tab from index, get body of Rounds Tab
  -- Plus one because arrays count from 1, but Notebook Index counts from 0
  local roundsTabBody = Notes.getNotebookTabs()[roundsTabIndex+1].body
  -- Get location of line Number in the Body String
  local numberIndexEnd = roundsTabBody:match'^.*():' - 1
  local numberIndexStart = roundsTabBody:match'^.*()\n'
  -- Parse and convert Line Number
  lineNumber = tonumber(string.sub(roundsTabBody, numberIndexStart, numberIndexEnd))
  Notes.editNotebookTab({
    index = roundsTabIndex,
    body = roundsTabBody..'\n'..(lineNumber + 1)..': '..note
  })
  log('Adding \"'..note..'\" to Rounds on line '..lineNumber)
end

-- A speacil Lua wait function (specified for seconds)
function wait(second)
end

-- *~~* ~**~ *~~* [[  Functions  ]] *~~* ~**~ *~~* --


-- *~~* ~**~ *~~* [[  Functions  ]] *~~* ~**~ *~~* --


-- *~~* ~**~ *~~* [[  Functions  ]] *~~* ~**~ *~~* --


-- Deal 4 cards to both players, spawn buttons, and start planning phase
function dealCards()
  log('deal')
  dealDeck(4)
  button.clearButtons() -- Remove Deal and Deck Builder buttons

  -- Make bet buttons for both players
  createBetButtons()

  ---- Make a button to quickly test a function
  -- local bTest_vars = {
  --   click_function='resultAddedPoints', function_owner=nil, label='Test',
  --   position={0,4,0}, rotation={0,90,0}, width=1200, height=800, font_size=300,
  --   color={1, 1, 1}, font_color={0, 0, 0},
  --   tooltip="temp function"
  -- }
  -- button.createButton(bTest_vars)

  -- Sends cards on field to winner's Win Pile and proceedes to drawing phase
  local bResults_vars = {
    click_function='results', function_owner=nil, label='Results',
    position={-7,1.15,0}, rotation={0,270,0}, width=1200, height=800, font_size=300,
    color={1, 1, 1}, font_color={0, 0, 0},
    tooltip="For the Winner"
  }
  button.createButton(bResults_vars) -- Make results button

  -- Make sum buttons
  local bSum_vars = {
    click_function='calculatePoints', function_owner=players['Blue'].winPile, label='Sum',
    position=players['Blue'].sumButtonPos, rotation={0,0,0}, width=900, height=650, font_size=300,
    color={1, 1, 1}, font_color={0, 0, 0},
    tooltip="Click to find sum"
  }
  button.createButton(bSum_vars) -- Make sum button for blue player
  --Sum points for orange player
  bSum_vars.position = players['Orange'].sumButtonPos
  bSum_vars.rotation = {0,180,0}
  bSum_vars.function_owner = players['Orange'].winPile
  button.createButton(bSum_vars) -- Make sum button for orange player
  --Sum points for discard
  bSum_vars.position = {11.4,2.15,0}
  bSum_vars.rotation = {0,270,0}
  bSum_vars.function_owner = discardZone
  bSum_vars.click_function='calculatePoints'
  button.createButton(bSum_vars) -- Make sum button for orange player

  gameStarted = true
end

-- Makes bet button for players
function createBetButtons()
  --Bet card for blue player
  local bBet_vars = {
    click_function='playerBet', function_owner=nil, label='Bet',
    position=players['Blue'].betPos, rotation={0,90,0}, width=1200, height=800, font_size=300,
    color={1, 1, 1}, font_color={0, 0, 0},
    tooltip="Bet to risk extra cards"
  }
  button.createButton(bBet_vars) -- Make bet button for blue player

  --Bet card for player 2
  bBet_vars.position = players['Orange'].betPos
  button.createButton(bBet_vars) -- Make bet button for orange player
end

-- Mkae button for specified player
function createBetButtonFor(color)
  local bBet_vars = {
    click_function='playerBet', function_owner=nil, label='Bet',
    position=players[color].betPos, rotation={0,90,0}, width=1200, height=800, font_size=300,
    color={1, 1, 1}, font_color={0, 0, 0},
    tooltip="Bet to risk extra cards"
  }
  button.createButton(bBet_vars)
end

-- Puts cards in field into player 1's win pile
function results(obj, color, alt_click)
  if players[color] == nil then
    broadcastToAll('The player does not have a color')
    log('A player with no color tried to press results button')
    return
  end

  local message = 'Player '..color..' Wins!'
  broadcastToAll(message)
  log(message)
  local zoneObjects = fieldZone.getObjects()
  local i = 0
  local winPlacement = players[color].winPile.getPosition()

  -- Calculate, Broadcast, and Record gained points & bonuses
  resultAddedPoints(players[color],zoneObjects,true) -- True for returning messages
  --table.insert(record['points'],points)

  --log('Testing Win Pile: '..players[color].winPile.getGUID())
  --log('Win Pile Position: '..winPlacement[1]..' '..winPlacement[2]..' '..winPlacement[3])
  for _, item in ipairs(zoneObjects) do -- Check each object in the zone
    if #item.getZones() == 2 then     -- If in only field zone and the zone surrounding the whole game (so doesn't grab deck)
        item.setPositionSmooth({winPlacement[1], winPlacement[2]+5+i, winPlacement[3]}, false, true) -- Put cards above win pile at varyisng heights
        i = i + .8
    end
  end

  -- Check if bet buttons exist, if not re-create them
  -- TODO there is definitely a cleaner way to do this
  local betButtonGlobalPositions = {
    ['Blue'] = button.positionToWorld(players['Blue'].betPos),
    ['Orange'] = button.positionToWorld(players['Orange'].betPos)}
  local blueBetButtonExists = false
  local orangeBetButtonExists = false

  for i, b in pairs(button.getButtons()) do
    if button.positionToWorld(b.position) == betButtonGlobalPositions['Blue'] then
      log('Blue bet button found')
      blueBetButtonExists = true
    end

    if button.positionToWorld(b.position) == betButtonGlobalPositions['Orange'] then
      log('Orange bet button found')
      orangeBetButtonExists = true
    end
  end

  if blueBetButtonExists == false then
    log('Creating blue bet button again')
    createBetButtonFor('Blue')
  end

  if orangeBetButtonExists == false then
    log('Creating orange bet button again')
    createBetButtonFor('Orange')
  end
end

-- Returns points earned from adding cards to winner
-- Given the player that won and cards that will be added
-- Doesn't work for decks in the field
function resultAddedPoints() --playerColor,zoneObjects
  local playerColor = 'Blue'
  local zoneObjects = fieldZone.getObjects()
  local player = players[playerColor]
  -- local sum = 0
  local numofCards = 0
  local cardTable = {}
  local bonusCards = {}
  local initialPoints = calculatePoints(player.wonCards)
  -- Copy values without referance
  for name, cards in pairs(player.wonCards) do
    cardTable[name] = player.wonCards[name]
  end
  -- simulates 'adding' cards from field to wonCards (doesn't actually change wonCards)
  for _, item in pairs(zoneObjects) do
    if #item.getZones() == 2 and item.tag == 'Card' then -- If a card is in only 2 zones (FieldZone and DeckBuilder | So not the deck)
      numofCards = numofCards + 1
      local name = item.getName()
      if cardTable[name] == nil then -- If not counted yet
        cardTable[name] = 1
      else -- If already counted
        cardTable[name] = cardTable[name] + 1
        -- -- Record 4 of a kind
        -- if cardTable[name] == 4 then
        --   --log('Found 4 of a kind: '..name)
        --   table.insert(bonusCards, name)
        -- end
      end
    end
  end

  -- New sum of points
  local simulatedPoints,bonusCards = calculatePoints(cardTable,true)

  -- Points gained from new cards
  local pointsGained = simulatedPoints - initialPoints
  -- 'Point totals added' message
  local pointMessage = 'Adding '..pointsGained..' to '..initialPoints..' for '..simulatedPoints..' points'
  -- Bonuses gained
  if #bonusCards > 0 then --There is at least a bonus
    local bonusMessage = '\nWith bonuses from: '
    for _, card in pairs(bonusCards) do
      bonusMessage = bonusMessage..card..'s '
    end
    broadcastToAll(pointMessage..bonusMessage) -- Broadcast with bonusMessage (seems only one broadcast at a time)
  else
    broadcastToAll(pointMessage) -- Broadcast without bonusMessage
  end
  addRoundNote(playerColor..' gained '..pointsGained..' with '..(#bonusCards*20)..' bonus from '..numofCards..' cards')
  return pointsGained
end

-- Bet
function playerBet(obj, color, alt_click)
  log('Player '..color..' bets')
  --log('Player Ace: '..players[color].wonCards['Ace']) -- To test wonCards working
  local betPlacement = players[color].betPos -- Bet button's place and bet card's place are the same
  --log('Placement of bet is: '..betPlacement[1]..' '..betPlacement[2]..' '..betPlacement[3])
  getDeck().takeObject({
    position          = {-betPlacement[1],betPlacement[2],betPlacement[3]}, --Have to flip x cordinate because the takeObject position flips the x value
    rotation          = {0,0,0},
    --callback_function = function,
    flip              = true
  })
  players[color].bet_state = true
  deleteButtonHere(betPlacement)
end

-- Is this still used?
--Given a table of cards, returns sum of points
--If bonusIsSeperate defined, then return sum and bonus seperately
function calculatePoints(cardTable,bonusIsSeperate)
  --log('      calculating points...')
  local bonusCards = {}
  local sum = 0 -- Normal sum
  for name, cards in pairs(cardTable) do
    sum = sum + cards*stats[name][1] -- add value of cards to sum
    if cards == 4 then-- If there are 4 of that type of card
      table.insert(bonusCards,name)
      sum = sum + 20 -- Add 4 of a kind bonus
    end
  end
  if bonusIsSeperate == nil then -- If not assigned
    return sum
  else if bonusIsSeperate == true then
    return sum, bonusCards end
  end
end

-- TODO Isn't actually used but should be used in other layout zones
function calculatePointsPrint(params)
  local zoneObjects = params.zoneObjects
  local zoneName = params.zoneName
  -- Count the cards in the zone
  local cardTable = {}
  for _, item in pairs(zoneObjects) do
    if item.tag == 'Card' then -- If a card
      local name = item.getName()
      if cardTable[name] == nil then -- If not counted yet
        cardTable[name] = 1
      else -- If already counted
        cardTable[name] = cardTable[name] + 1
      end
    end
  end
  -- Calculate total points and record bonus cards
  local sum, bonusCards = calculatePoints(cardTable,true)
  -- Base points message
  local pointMessage = zoneName..' has '..sum..' points'
  -- Bonuses gained
  if #bonusCards > 0 then --There is at least a bonus
    local bonusMessage = '\nWith bonuses from: ' -- "Hello" "World" "HelloWorld"
    for _, card in pairs(bonusCards) do
      bonusMessage = bonusMessage..card..'s '
    end
    broadcastToAll(pointMessage..bonusMessage) -- Broadcast with bonusMessage (seems only one broadcast at a time)
  else
    broadcastToAll(pointMessage) -- Broadcast without bonusMessage
  end
end

-------------------------------------------------------------------------------
-- Shortcut-Specific Functions
-------------------------------------------------------------------------------
-- Draw a card for player when hotkey is pressed
function drawCardShortcut(playerColor)
  -- Make sure game is at a state where card can be drawn (after 'Deal' button is pressed)
  if gameStarted == false then
    log("Draw Card shortcut is not allowed at this time")
    return
  end

  -- Make sure only valid players can use shortcut
  if isValidColor(playerColor) then
    log(playerColor .. " player cannot use Draw Card shortcut")
    return
  end

  log("Shortcut: deal a card to " .. playerColor .. " player")
  dealDeck(1, playerColor)
end

-- Show sum of points in discard if hotkey is pressed
function getDiscardSumShortcut()
  -- Make sure game is at a state where zones are set up (after 'Deal' button is pressed)
  if gameStarted == false then
    log("Get Discard Sum shortcut is not allowed at this time")
    return
  end

  log("Shortcut: get discard point sum")
  discardZone.call('calculatePoints')
end

-- Show sum of points in player's win pile if hotkey is pressed
function getMySumShortcut(playerColor)
  -- Make sure game is at a state where zones are set up (after 'Deal' button is pressed)
  if gameStarted == false then
    log("Get My Sum shortcut is not allowed at this time")
    return
  end

  -- Make sure only valid players can use shortcut
  if isValidColor(playerColor) then
    log(playerColor .. " player cannot use Get My Sum shortcut")
    return
  end

  -- Get player zone and announce point sum
  log("Shortcut: get my point sum")
  players[playerColor].winPile.call('calculatePoints')
end

-- Show sum of points in opponent's win pile if hotkey is pressed
function getOpponentSumShortcut(playerColor)
  -- Make sure game is at a state where zones are set up (after 'Deal' button is pressed)
  if gameStarted == false then
    log("Get Opponent Sum shortcut is not allowed at this time")
    return
  end

  -- Make sure only valid players can use shortcut
  if isValidColor(playerColor) then
    log(playerColor .. " player cannot use Get Opponent Sum shortcut")
    return
  end

  local opponentZone = nil
  if playerColor == 'Orange' then
    opponentZone = players['Blue'].winPile
  else
    opponentZone = players['Orange'].winPile
  end

  log("Shortcut: get opponent point sum")
  opponentZone.call('calculatePoints')
end

-------------------------------------------------------------------------------
-- Validation Functions
-------------------------------------------------------------------------------
-- Check if player color is one of the actual player colors
function isValidColor(playerColor)
  return playerColor ~= 'Orange' and playerColor ~= 'Blue'
end
