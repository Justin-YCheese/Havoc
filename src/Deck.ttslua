--[[
Deck.ttslua START

This file contains deck and card-related functions.
]]

function shuffle(deck)
  for _, item in ipairs(deck) do -- Check if there's a deck
      if item.tag == 'Deck' then
          item.shuffle() -- Return deck
      end
  end
end

--Record card in player's wonCard table, Pass in player and name of card (boolean log if logging)
function recordCard(player, name)
  if player.wonCards[name] == nil then -- If card hasn't been counted yet
    player.wonCards[name] = 1
  else -- If card has been counted
    player.wonCards[name] = player.wonCards[name] + 1
    if player.wonCards[name] > 4 then
      log('Error: Counted more than 4 of '..name..'s')
    end
  end
  log('Count '..player.wonCards[name]..' '..name..'(s) in zone')
end

--Forget card in player's wonCard table, Pass in player and name of card
function forgetCard(player, name)
  player.wonCards[name] = player.wonCards[name] - 1
  if player.wonCards[name] < 0 then
    log('Error: wonCards reads a negative value for '..name)
  end
  log('Count '..player.wonCards[name]..' '..name..'(s) in zone')
end

-- Get a card from either the deck or card in the deck zone (a single card deck turns into a card)
function getDeck()
    local zoneObjects = deckZone.getObjects()
    for _, item in ipairs(zoneObjects) do -- Check if there's a deck
        if item.tag == 'Deck' then
            return item -- Return deck
        end
    end
    for _, item in ipairs(zoneObjects) do -- Check if there's a card after checking for deck
        if item.tag == 'Card' then
            return item -- Return card
        end
    end
    log('Deck is empty')
    return nil
end

-- deals a card all players or a certain player from the deck Zone (playerColor optional)
function dealDeck(number, playerColor)
  if getDeck() != nil then
    if playerColor == nil then
      getDeck().deal(number)
    else
      getDeck().deal(number, playerColor)
    end
  end
end

-- Deal 4 cards to both players, spawn buttons, and start planning phase
function dealCards()
  log('deal')
  dealDeck(4)
  button.clearButtons() -- Remove Deal and Deck Builder buttons

  -- Make bet buttons for both players
  createBetButtons()

  ---- Make a button to quickly test a function
  -- local bTest_vars = {
  --   click_function='resultAddedPoints', function_owner=nil, label='Test',
  --   position={0,4,0}, rotation={0,90,0}, width=1200, height=800, font_size=300,
  --   color={1, 1, 1}, font_color={0, 0, 0},
  --   tooltip="temp function"
  -- }
  -- button.createButton(bTest_vars)

  -- Sends cards on field to winner's Win Pile and proceedes to drawing phase
  local bResults_vars = {
    click_function='results', function_owner=nil, label='Results',
    position={-7,1.15,0}, rotation={0,270,0}, width=1200, height=800, font_size=300,
    color={1, 1, 1}, font_color={0, 0, 0},
    tooltip="For the Winner"
  }
  button.createButton(bResults_vars) -- Make results button

  -- Make sum buttons
  local bSum_vars = {
    click_function='calculatePoints', function_owner=players['Blue'].winPile, label='Sum',
    position=players['Blue'].sumButtonPos, rotation={0,0,0}, width=900, height=650, font_size=300,
    color={1, 1, 1}, font_color={0, 0, 0},
    tooltip="Click to find sum"
  }
  button.createButton(bSum_vars) -- Make sum button for blue player
  --Sum points for orange player
  bSum_vars.position = players['Orange'].sumButtonPos
  bSum_vars.rotation = {0,180,0}
  bSum_vars.function_owner = players['Orange'].winPile
  button.createButton(bSum_vars) -- Make sum button for orange player
  --Sum points for discard
  bSum_vars.position = {11.4,2.15,0}
  bSum_vars.rotation = {0,270,0}
  bSum_vars.function_owner = discardZone
  bSum_vars.click_function='calculatePoints'
  button.createButton(bSum_vars) -- Make sum button for orange player

  gameStarted = true
end

--[[
Deck.ttslua END
]]
