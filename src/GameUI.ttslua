--[[
GameUI.ttslua START

This file contains functions that create or delete UI.
]]

-- Make deal button (setup button)
function createDealButton()
  local bDeal_vars = {
    click_function='dealCards',
    function_owner=nil,
    label='Deal',
    position={7,3,0},
    rotation={0,90,0},
    width=STANDARD_BUTTON_WIDTH,
    height=STANDARD_BUTTON_HEIGHT,
    font_size=BUTTON_FONT_SIZE,
    color=BUTTON_BACKGROUND_COLOR,
    font_color=BUTTON_TEXT_COLOR,
    tooltip="Give players 4 cards"
  }

  button.createButton(bDeal_vars)
end

-- Sends cards on field to winner's Win Pile and proceedes to drawing phase
function createResultsButton()
  local bResults_vars = {
    click_function='results',
    function_owner=nil,
    label='Results',
    position={-7,1.15,3.75},
    rotation={0,270,0},
    width=STANDARD_BUTTON_WIDTH,
    height=STANDARD_BUTTON_HEIGHT,
    font_size=BUTTON_FONT_SIZE,
    color=BUTTON_BACKGROUND_COLOR,
    font_color=BUTTON_TEXT_COLOR,
    tooltip="For the Winner"
  }
  button.createButton(bResults_vars) -- Make results button
end

function createClearButton()
  local buttonSettings = {
    click_function='clearField',
    function_owner=nil,
    label='Clear',
    position={-7,1.15,-3.75},
    rotation={0,270,0},
    width=STANDARD_BUTTON_WIDTH,
    height=STANDARD_BUTTON_HEIGHT,
    font_size=BUTTON_FONT_SIZE,
    color=RED,
    font_color=BUTTON_BACKGROUND_COLOR, -- Changed from text to background color for white colored text
    tooltip="Move fields cards to discard"
  }

  button.createButton(buttonSettings)
end

function createSumButtons()
    -- Make sum buttons
    local bSum_vars = {
      click_function='calculatePoints',
      function_owner=players['Blue'].winPile,
      label='Sum',
      position=players['Blue'].sumButtonPos,
      rotation={0,0,0},
      width=SMALL_BUTTON_WIDTH,
      height=SMALL_BUTTON_HEIGHT,
      font_size=BUTTON_FONT_SIZE,
      color=BUTTON_BACKGROUND_COLOR,
      font_color=BUTTON_TEXT_COLOR,
      tooltip="Click to find sum"
    }
    button.createButton(bSum_vars) -- Make sum button for blue player
    --Sum points for orange player
    bSum_vars.position = players['Orange'].sumButtonPos
    bSum_vars.rotation = {0,180,0}
    bSum_vars.function_owner = players['Orange'].winPile
    button.createButton(bSum_vars) -- Make sum button for orange player
    --Sum points for discard
    bSum_vars.position = {11.4,1.15,0}
    bSum_vars.rotation = {0,270,0}
    bSum_vars.function_owner = discardZone
    bSum_vars.click_function='calculatePoints'
    button.createButton(bSum_vars) -- Make sum button for discard
end

function createBuildDeckButton(deckBuilder)
  --Make Build Deck button (a button to assign Havoc values to cards)
  local bDeckBuilder_vars = {
    click_function='build',
    function_owner=deckBuilder,
    label='Build Deck',
    position={-19,4,-9},
    rotation={0,180,0},
    width=BIG_BUTTON_WIDTH,
    height=STANDARD_BUTTON_HEIGHT,
    font_size=BUTTON_FONT_SIZE,
    color=BUTTON_BACKGROUND_COLOR,
    font_color=BUTTON_TEXT_COLOR,
    tooltip="Spread cards here then click button to use custom decks"
  }

  button.createButton(bDeckBuilder_vars)
end

-- Removes button with specific position (because removeButton() only works with indexes)
function deleteButtonHere(position)
  for i, b in pairs(button.getButtons()) do
    if button.positionToWorld(b.position) == button.positionToWorld(position) then -- So that both positions will match
      button.removeButton(i-1) -- The corresponding indec (because indexes start at 1)
      break
    end
  end
end

-- Makes bet button for players
function createBetButtons()
  --Bet card for blue player
  local bBet_vars = {
    click_function='blueBet',
    function_owner=nil,
    label='Bet',
    position=players['Blue'].betPos,
    rotation={0,90,0},
    width=STANDARD_BUTTON_WIDTH,
    height=STANDARD_BUTTON_HEIGHT,
    font_size=BUTTON_FONT_SIZE,
    color=BUTTON_BACKGROUND_COLOR,
    font_color=BUTTON_TEXT_COLOR,
    tooltip=BET_BUTTON_TOOLTIP_MESSAGE
  }
  button.createButton(bBet_vars) -- Make bet button for blue player

  --Bet card for orange player
  bBet_vars.position = players['Orange'].betPos
  bBet_vars.click_function = 'orangeBet'
  button.createButton(bBet_vars) -- Make bet button for orange player
end

-- Mkae button for specified player
function createBetButtonFor(color)
  local bet_function = nil

  if color == 'Blue' then
    bet_function = 'blueBet'
  elseif color == 'Orange' then
    bet_function = 'orangeBet'
  end

  local bBet_vars = {
    click_function=bet_function,
    function_owner=nil,
    label='Bet',
    position=players[color].betPos,
    rotation={0,90,0},
    width=STANDARD_BUTTON_WIDTH,
    height=STANDARD_BUTTON_HEIGHT,
    font_size=BUTTON_FONT_SIZE,
    color=BUTTON_BACKGROUND_COLOR,
    font_color=BUTTON_TEXT_COLOR,
    tooltip=BET_BUTTON_TOOLTIP_MESSAGE
  }
  button.createButton(bBet_vars)
end

-- Check if bet buttons exist, if not re-create them
-- TODO there is definitely a cleaner way to do this
function regenerateBetButtons()
  local betButtonGlobalPositions = {
    ['Blue'] = button.positionToWorld(players['Blue'].betPos),
    ['Orange'] = button.positionToWorld(players['Orange'].betPos)
  }

  local blueBetButtonExists = false
  local orangeBetButtonExists = false

  for i, b in pairs(button.getButtons()) do
    if button.positionToWorld(b.position) == betButtonGlobalPositions['Blue'] then
      log('Blue bet button found')
      blueBetButtonExists = true
    end

    if button.positionToWorld(b.position) == betButtonGlobalPositions['Orange'] then
      log('Orange bet button found')
      orangeBetButtonExists = true
    end
  end

  if blueBetButtonExists == false then
    log('Creating blue bet button again')
    createBetButtonFor('Blue')
  end

  if orangeBetButtonExists == false then
    log('Creating orange bet button again')
    createBetButtonFor('Orange')
  end
end

--[[
GameUI.ttslua END
]]
